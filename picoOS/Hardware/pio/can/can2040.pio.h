// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// can2040 //
// ------- //

#define can2040_wrap_target 0
#define can2040_wrap 31

#define can2040_offset_sync_found_end_of_message 2u
#define can2040_offset_sync_signal_start 4u
#define can2040_offset_sync_entry 6u
#define can2040_offset_sync_end 13u
#define can2040_offset_shared_rx_read 13u
#define can2040_offset_shared_rx_end 15u
#define can2040_offset_match_load_next 18u
#define can2040_offset_tx_conflict 24u
#define can2040_offset_match_end 25u
#define can2040_offset_tx_got_recessive 25u
#define can2040_offset_tx_write_pin 27u

static const uint16_t can2040_program_instructions[] = {
            //     .wrap_target
    0x0085, //  0: jmp    y--, 5                     
    0x0048, //  1: jmp    x--, 8                     
    0xe029, //  2: set    x, 9                       
    0x00cc, //  3: jmp    pin, 12                    
    0xc000, //  4: irq    nowait 0                   
    0x00c0, //  5: jmp    pin, 0                     
    0xc040, //  6: irq    clear 0                    
    0xe429, //  7: set    x, 9                   [4] 
    0xf043, //  8: set    y, 3                   [16]
    0xc104, //  9: irq    nowait 4               [1] 
    0x03c5, // 10: jmp    pin, 5                 [3] 
    0x0307, // 11: jmp    7                      [3] 
    0x0043, // 12: jmp    x--, 3                     
    0x20c4, // 13: wait   1 irq, 4                   
    0x4001, // 14: in     pins, 1                    
    0xa046, // 15: mov    y, isr                     
    0x01b2, // 16: jmp    x != y, 18             [1] 
    0xc002, // 17: irq    nowait 2                   
    0x40eb, // 18: in     osr, 11                    
    0x4054, // 19: in     y, 20                      
    0xa047, // 20: mov    y, osr                     
    0x8080, // 21: pull   noblock                    
    0xa027, // 22: mov    x, osr                     
    0x0098, // 23: jmp    y--, 24                    
    0xa0e2, // 24: mov    osr, y                     
    0x6021, // 25: out    x, 1                       
    0x00df, // 26: jmp    pin, 31                    
    0xb801, // 27: mov    pins, x                [24]
    0x02d9, // 28: jmp    pin, 25                [2] 
    0x0058, // 29: jmp    x--, 24                    
    0x6021, // 30: out    x, 1                       
    0x011b, // 31: jmp    27                     [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program can2040_program = {
    .instructions = can2040_program_instructions,
    .length = 32,
    .origin = -1,
};

static inline pio_sm_config can2040_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + can2040_wrap_target, offset + can2040_wrap);
    return c;
}
#endif

// ------------- //
// sm_sync_setup //
// ------------- //

#define sm_sync_setup_wrap_target 0
#define sm_sync_setup_wrap 1

static const uint16_t sm_sync_setup_program_instructions[] = {
            //     .wrap_target
    0xe080, //  0: set    pindirs, 0                 
    0x80a0, //  1: pull   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_sync_setup_program = {
    .instructions = sm_sync_setup_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config sm_sync_setup_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_sync_setup_wrap_target, offset + sm_sync_setup_wrap);
    return c;
}
#endif

// ---------------------- //
// sm_sync_alt_slow_start //
// ---------------------- //

#define sm_sync_alt_slow_start_wrap_target 0
#define sm_sync_alt_slow_start_wrap 0

static const uint16_t sm_sync_alt_slow_start_program_instructions[] = {
            //     .wrap_target
    0xa127, //  0: mov    x, osr                 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_sync_alt_slow_start_program = {
    .instructions = sm_sync_alt_slow_start_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config sm_sync_alt_slow_start_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_sync_alt_slow_start_wrap_target, offset + sm_sync_alt_slow_start_wrap);
    return c;
}
#endif

// ----------- //
// sm_rx_setup //
// ----------- //

#define sm_rx_setup_wrap_target 0
#define sm_rx_setup_wrap 0

static const uint16_t sm_rx_setup_program_instructions[] = {
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_rx_setup_program = {
    .instructions = sm_rx_setup_program_instructions,
    .length = 0,
    .origin = -1,
};

static inline pio_sm_config sm_rx_setup_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_rx_setup_wrap_target, offset + sm_rx_setup_wrap);
    return c;
}
#endif

// -------------- //
// sm_match_setup //
// -------------- //

#define sm_match_setup_wrap_target 0
#define sm_match_setup_wrap 2

static const uint16_t sm_match_setup_program_instructions[] = {
            //     .wrap_target
    0xe040, //  0: set    y, 0                       
    0xa0e2, //  1: mov    osr, y                     
    0xa02a, //  2: mov    x, !y                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_match_setup_program = {
    .instructions = sm_match_setup_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config sm_match_setup_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_match_setup_wrap_target, offset + sm_match_setup_wrap);
    return c;
}
#endif

// ----------- //
// sm_tx_setup //
// ----------- //

#define sm_tx_setup_wrap_target 0
#define sm_tx_setup_wrap 1

static const uint16_t sm_tx_setup_program_instructions[] = {
            //     .wrap_target
    0xe001, //  0: set    pins, 1                    
    0xe081, //  1: set    pindirs, 1                 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_tx_setup_program = {
    .instructions = sm_tx_setup_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config sm_tx_setup_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_tx_setup_wrap_target, offset + sm_tx_setup_wrap);
    return c;
}
#endif

// -------------- //
// sm_tx_transmit //
// -------------- //

#define sm_tx_transmit_wrap_target 0
#define sm_tx_transmit_wrap 2

static const uint16_t sm_tx_transmit_program_instructions[] = {
            //     .wrap_target
    0xe001, //  0: set    pins, 1                    
    0x6021, //  1: out    x, 1                       
    0x20c0, //  2: wait   1 irq, 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_tx_transmit_program = {
    .instructions = sm_tx_transmit_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config sm_tx_transmit_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_tx_transmit_wrap_target, offset + sm_tx_transmit_wrap);
    return c;
}
#endif

// --------- //
// sm_tx_ack //
// --------- //

#define sm_tx_ack_wrap_target 0
#define sm_tx_ack_wrap 3

static const uint16_t sm_tx_ack_program_instructions[] = {
            //     .wrap_target
    0xc023, //  0: irq    wait 3                     
    0xe001, //  1: set    pins, 1                    
    0x6021, //  2: out    x, 1                       
    0x20c2, //  3: wait   1 irq, 2                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sm_tx_ack_program = {
    .instructions = sm_tx_ack_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config sm_tx_ack_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sm_tx_ack_wrap_target, offset + sm_tx_ack_wrap);
    return c;
}
#endif

// ----------------- //
// reference_sync_sm //
// ----------------- //

#define reference_sync_sm_wrap_target 0
#define reference_sync_sm_wrap 21

static const uint16_t reference_sync_sm_program_instructions[] = {
            //     .wrap_target
    0xe029, //  0: set    x, 9                       
    0x0002, //  1: jmp    2                          
    0xc004, //  2: irq    nowait 4                   
    0x00c5, //  3: jmp    pin, 5                     
    0x0000, //  4: jmp    0                          
    0xe043, //  5: set    y, 3                       
    0x00c8, //  6: jmp    pin, 8                     
    0x0000, //  7: jmp    0                          
    0x0086, //  8: jmp    y--, 6                     
    0x0042, //  9: jmp    x--, 2                     
    0x000b, // 10: jmp    11                         
    0xe028, // 11: set    x, 8                       
    0x00ce, // 12: jmp    pin, 14                    
    0x0013, // 13: jmp    19                         
    0x004c, // 14: jmp    x--, 12                    
    0x0010, // 15: jmp    16                         
    0xc000, // 16: irq    nowait 0                   
    0x00d1, // 17: jmp    pin, 17                    
    0x0013, // 18: jmp    19                         
    0xc000, // 19: irq    nowait 0                   
    0xc040, // 20: irq    clear 0                    
    0x0000, // 21: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program reference_sync_sm_program = {
    .instructions = reference_sync_sm_program_instructions,
    .length = 22,
    .origin = -1,
};

static inline pio_sm_config reference_sync_sm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + reference_sync_sm_wrap_target, offset + reference_sync_sm_wrap);
    return c;
}
#endif

